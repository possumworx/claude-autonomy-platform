#!/bin/bash
# Natural command to search Linear issues
# Usage: search <query>

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STATE_FILE="$SCRIPT_DIR/../data/linear_state.json"

# Check if state file exists and is initialized
if [ ! -f "$STATE_FILE" ] || [ "$(jq -r '.user.id' "$STATE_FILE" 2>/dev/null)" == "" ]; then
    echo "‚ùå Linear not initialized. Run 'linear/init' first!"
    exit 1
fi

# Parse arguments
if [ $# -eq 0 ]; then
    echo "Usage: search <query>"
    echo "Example: search \"discord integration\""
    exit 1
fi

QUERY="$*"

echo "üîç Searching for: $QUERY"
echo ""

# Build the JSON payload
PAYLOAD=$(jq -n \
    --arg query "$QUERY" \
    '{
        query: $query,
        first: 10
    }')

# Search issues using Claude with MCP
PROMPT="Please search Linear issues using mcp__linear__linear_search_issues with these parameters: $PAYLOAD

Please format the output as a readable list showing:
- Issue ID and title
- Status
- Assignee (if any)
- Project (if any)"

RESULT=$(echo "$PROMPT" | claude --print --dangerously-skip-permissions 2>&1)

# Check if we got results
if echo "$RESULT" | grep -q -E "(POSS-[0-9]+|No issues found|found [0-9]+ issue)"; then
    echo "$RESULT" | grep -v "^Using" | grep -v "^Please search"
else
    echo "‚ùå Search failed"
    echo "$RESULT"
    exit 1
fi