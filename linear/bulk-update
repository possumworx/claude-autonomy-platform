#!/bin/bash
# Bulk update Linear issues based on filters

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/lib/linear_common.sh"

# Check prerequisites
check_linear_init || exit 1
check_claude_session || exit 1

# Initialize variables
FILTER_PROJECT=""
FILTER_STATUS=""
FILTER_ASSIGNEE=""
FILTER_LABEL=""
SET_STATUS=""
SET_ASSIGNEE=""
SET_PRIORITY=""
DRY_RUN=false

# Show usage
show_usage() {
    cat << EOF
Usage: bulk-update --filter "conditions" --set "updates"

Filter Options:
    --filter-project NAME    Filter by project
    --filter-status STATUS   Filter by current status
    --filter-assignee USER   Filter by assignee (@me, @none, or username)
    --filter-label LABEL     Filter by label

Update Options:
    --set-status STATUS      Set new status
    --set-assignee USER      Set assignee (@me, @none, or username)
    --set-priority NUM       Set priority (1-4)

Other Options:
    --dry-run               Preview changes without applying
    --help, -h              Show this help

Examples:
    # Move all TODO items in CLAP to In Progress
    bulk-update --filter-project CLAP --filter-status Todo --set-status "In Progress"
    
    # Assign all unassigned high priority issues to me
    bulk-update --filter-assignee @none --filter-priority 1,2 --set-assignee @me
    
    # Lower priority of all blocked issues
    bulk-update --filter-status Blocked --set-priority 4 --dry-run
EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_usage
            exit 0
            ;;
        --filter-project)
            shift; FILTER_PROJECT="$1"; shift ;;
        --filter-status)
            shift; FILTER_STATUS="$1"; shift ;;
        --filter-assignee)
            shift; FILTER_ASSIGNEE="$1"; shift ;;
        --filter-label)
            shift; FILTER_LABEL="$1"; shift ;;
        --set-status)
            shift; SET_STATUS="$1"; shift ;;
        --set-assignee)
            shift; SET_ASSIGNEE="$1"; shift ;;
        --set-priority)
            shift; SET_PRIORITY="$1"; shift ;;
        --dry-run)
            DRY_RUN=true; shift ;;
        *)
            echo -e "${ICON_ERROR} Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Validate we have filters and updates
if [ -z "$FILTER_PROJECT" ] && [ -z "$FILTER_STATUS" ] && [ -z "$FILTER_ASSIGNEE" ] && [ -z "$FILTER_LABEL" ]; then
    echo -e "${ICON_ERROR} At least one filter is required"
    show_usage
    exit 1
fi

if [ -z "$SET_STATUS" ] && [ -z "$SET_ASSIGNEE" ] && [ -z "$SET_PRIORITY" ]; then
    echo -e "${ICON_ERROR} At least one update action is required"
    show_usage
    exit 1
fi

# Build filter description
echo -e "${ICON_INFO} ${CYAN}Bulk Update Operation${RESET}"
echo -e "\n${BLUE}Filters:${RESET}"
[ -n "$FILTER_PROJECT" ] && echo -e "  • Project: $FILTER_PROJECT"
[ -n "$FILTER_STATUS" ] && echo -e "  • Status: $FILTER_STATUS"
[ -n "$FILTER_ASSIGNEE" ] && echo -e "  • Assignee: $FILTER_ASSIGNEE"
[ -n "$FILTER_LABEL" ] && echo -e "  • Label: $FILTER_LABEL"

echo -e "\n${BLUE}Updates:${RESET}"
[ -n "$SET_STATUS" ] && echo -e "  • Set status to: $SET_STATUS"
[ -n "$SET_ASSIGNEE" ] && echo -e "  • Set assignee to: $SET_ASSIGNEE"
[ -n "$SET_PRIORITY" ] && echo -e "  • Set priority to: $SET_PRIORITY"

[ "$DRY_RUN" = true ] && echo -e "\n${YELLOW}DRY RUN MODE - No changes will be made${RESET}"

# Build search prompt
PROMPT="Please search for Linear issues with these filters using linear_search_issues:"

# Add filters
if [ -n "$FILTER_PROJECT" ]; then
    PROJECT_ID=$(get_project_id "$FILTER_PROJECT")
    [ -n "$PROJECT_ID" ] && PROMPT="$PROMPT
- projectIds: [\"$PROJECT_ID\"]"
fi

[ -n "$FILTER_STATUS" ] && PROMPT="$PROMPT
- states: [\"$FILTER_STATUS\"]"

if [ "$FILTER_ASSIGNEE" = "@none" ]; then
    PROMPT="$PROMPT
Filter for unassigned issues"
elif [ "$FILTER_ASSIGNEE" = "@me" ]; then
    USER_ID=$(get_user_id)
    PROMPT="$PROMPT
- assigneeIds: [\"$USER_ID\"]"
fi

PROMPT="$PROMPT
- first: 100

Show me the issues that match these filters with their IDs and current state."

# Search for matching issues
echo -e "\n${YELLOW}Searching for matching issues...${RESET}"
SEARCH_RESULT=$(execute_linear_mcp "$PROMPT")

# Extract issue IDs
ISSUE_IDS=$(echo "$SEARCH_RESULT" | grep -oE "[A-Z]+-[0-9]+" | sort -u)
ISSUE_COUNT=$(echo "$ISSUE_IDS" | grep -c "^")

if [ -z "$ISSUE_IDS" ] || [ "$ISSUE_COUNT" -eq 0 ]; then
    echo -e "\n${ICON_WARNING} No issues found matching the filters"
    exit 0
fi

echo -e "\n${ICON_INFO} Found ${CYAN}${ISSUE_COUNT}${RESET} issues matching filters"

# Show preview
if [ "$DRY_RUN" = true ] || [ "$ISSUE_COUNT" -gt 10 ]; then
    echo -e "\n${BLUE}Issues to update:${RESET}"
    echo "$ISSUE_IDS" | head -20
    [ "$ISSUE_COUNT" -gt 20 ] && echo "... and $((ISSUE_COUNT - 20)) more"
fi

# If dry run, stop here
if [ "$DRY_RUN" = true ]; then
    echo -e "\n${YELLOW}Dry run complete. No changes made.${RESET}"
    exit 0
fi

# Confirm if many issues
if [ "$ISSUE_COUNT" -gt 10 ]; then
    echo -e "\n${YELLOW}This will update ${ISSUE_COUNT} issues. Continue? (y/N)${RESET}"
    read -r CONFIRM
    if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
        echo "Cancelled."
        exit 0
    fi
fi

# Build update prompt
UPDATE_PROMPT="Please use linear_bulk_update_issues to update these issues:

Issue IDs: [$(echo "$ISSUE_IDS" | tr '\n' ',' | sed 's/,$//' | sed 's/,/", "/g' | sed 's/^/"/;s/$/"/')]

Updates:"

# Handle assignee resolution
if [ "$SET_ASSIGNEE" = "@me" ]; then
    USER_ID=$(get_user_id)
    UPDATE_PROMPT="$UPDATE_PROMPT
- assigneeId: \"$USER_ID\""
elif [ "$SET_ASSIGNEE" = "@none" ]; then
    UPDATE_PROMPT="$UPDATE_PROMPT
- assigneeId: null"
elif [ -n "$SET_ASSIGNEE" ]; then
    UPDATE_PROMPT="$UPDATE_PROMPT
- assigneeId: \"$SET_ASSIGNEE\""
fi

# Add other updates
[ -n "$SET_STATUS" ] && UPDATE_PROMPT="$UPDATE_PROMPT
- stateId: (find the state ID for \"$SET_STATUS\")"

[ -n "$SET_PRIORITY" ] && UPDATE_PROMPT="$UPDATE_PROMPT
- priority: $SET_PRIORITY"

UPDATE_PROMPT="$UPDATE_PROMPT

Show me confirmation of how many issues were updated."

# Execute bulk update
echo -e "\n${YELLOW}Applying updates...${RESET}"
UPDATE_RESULT=$(execute_linear_mcp "$UPDATE_PROMPT")

# Check result
if echo "$UPDATE_RESULT" | grep -q -E "(Updated|Successfully|issues were updated)"; then
    echo -e "\n${ICON_SUCCESS} ${GREEN}Bulk update completed!${RESET}"
    echo "$UPDATE_RESULT" | grep -E "(Updated|modified|changed)" | head -5
else
    echo -e "\n${ICON_ERROR} ${RED}Bulk update failed${RESET}"
    echo "$UPDATE_RESULT" | head -10
    exit 1
fi