#!/bin/bash
# Enhanced Linear issue creation with full metadata support

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/lib/linear_common.sh"

# Check prerequisites
check_linear_init || exit 1
check_claude_session || exit 1

# Initialize variables
TITLE=""
DESCRIPTION=""
PROJECT=""
ASSIGNEE=""
PRIORITY=""
ESTIMATE=""
LABELS=""
DUE_DATE=""

# Function to show usage
show_usage() {
    cat << EOF
Usage: add "Issue title" [options]

Options:
    --project, -p NAME      Project name or key
    --description, -d TEXT  Issue description
    --assignee, -a USER     Assign to user (use @me for self)
    --priority NUM          Priority (1=urgent, 2=high, 3=medium, 4=low)
    --estimate, -e NUM      Story points (1, 2, 3, 5, 8, etc.)
    --labels, -l "A,B,C"    Comma-separated labels
    --due DATE             Due date (YYYY-MM-DD or "tomorrow", "next week")

Examples:
    add "Fix login bug"
    add "New feature" --project CLAP --assignee @me
    add "Urgent fix" -p POSS --priority 1 --due tomorrow
    add "Large task" --estimate 8 --labels "backend,api"
EOF
}

# Parse date shortcuts
parse_date_shortcut() {
    case "$1" in
        today) date +%Y-%m-%d ;;
        tomorrow) date -d "+1 day" +%Y-%m-%d ;;
        "next week") date -d "+1 week" +%Y-%m-%d ;;
        "next month") date -d "+1 month" +%Y-%m-%d ;;
        *) echo "$1" ;;  # Assume it's already in correct format
    esac
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_usage
            exit 0
            ;;
        --project|-p)
            shift
            PROJECT="$1"
            shift
            ;;
        --description|-d)
            shift
            DESCRIPTION="$1"
            shift
            ;;
        --assignee|-a)
            shift
            ASSIGNEE="$1"
            shift
            ;;
        --priority)
            shift
            PRIORITY="$1"
            shift
            ;;
        --estimate|-e)
            shift
            ESTIMATE="$1"
            shift
            ;;
        --labels|-l)
            shift
            LABELS="$1"
            shift
            ;;
        --due)
            shift
            DUE_DATE=$(parse_date_shortcut "$1")
            shift
            ;;
        *)
            if [ -z "$TITLE" ]; then
                TITLE="$1"
            else
                TITLE="$TITLE $1"
            fi
            shift
            ;;
    esac
done

# Validate required fields
if [ -z "$TITLE" ]; then
    echo -e "${ICON_ERROR} Error: Issue title is required"
    echo ""
    show_usage
    exit 1
fi

# Get team ID
TEAM_ID=$(get_team_id)

# Resolve project ID if provided
PROJECT_ID=""
if [ -n "$PROJECT" ]; then
    PROJECT_ID=$(get_project_id "$PROJECT")
    if [ -z "$PROJECT_ID" ]; then
        echo -e "${ICON_WARNING} Warning: Project '$PROJECT' not found, will use default team"
    fi
fi

# Resolve assignee if @me
ASSIGNEE_ID=""
if [ "$ASSIGNEE" == "@me" ]; then
    ASSIGNEE_ID=$(get_user_id)
elif [ -n "$ASSIGNEE" ]; then
    # TODO: Look up user ID by name/email
    echo -e "${ICON_INFO} Note: User lookup not yet implemented, skipping assignee"
fi

# Build the MCP command
echo -e "${ICON_INFO} Creating issue: ${CYAN}${TITLE}${RESET}"

# Create prompt for Claude
PROMPT="Please use the Linear MCP tool linear_create_issue with these parameters:
- title: \"$TITLE\"
- description: \"${DESCRIPTION:-$TITLE}\"
- teamId: \"$TEAM_ID\""

# Add optional parameters
[ -n "$PROJECT_ID" ] && PROMPT="$PROMPT
- projectId: \"$PROJECT_ID\""

[ -n "$ASSIGNEE_ID" ] && PROMPT="$PROMPT
- assigneeId: \"$ASSIGNEE_ID\""

[ -n "$PRIORITY" ] && PROMPT="$PROMPT
- priority: $PRIORITY"

[ -n "$ESTIMATE" ] && PROMPT="$PROMPT
- estimate: $ESTIMATE"

PROMPT="$PROMPT

Please create the issue and show me:
1. The issue ID and title
2. A link to view it
3. Confirmation of all applied attributes"

# Execute via Claude MCP
echo -e "${YELLOW}Creating issue...${RESET}"
RESULT=$(execute_linear_mcp "$PROMPT")

# Parse and display result
if echo "$RESULT" | grep -q -E "(Created issue|Successfully created|[A-Z]+-[0-9]+)"; then
    echo -e "\n${ICON_SUCCESS} ${GREEN}Issue created successfully!${RESET}"
    echo ""
    echo "$RESULT" | grep -E "(Issue:|ID:|Title:|Link:|URL:|Created)" | sed 's/^/  /'
    
    # Save the project prefix if we detected an issue ID
    if [[ "$RESULT" =~ ([A-Z]+)-[0-9]+ ]]; then
        save_preference "recent_issue_prefix" "${BASH_REMATCH[1]}"
    fi
else
    echo -e "\n${ICON_ERROR} ${RED}Failed to create issue${RESET}"
    echo "Response:"
    echo "$RESULT" | head -10
    exit 1
fi