#!/usr/bin/env python3
"""
Fetch images from recent Discord messages
Shows available images and allows viewing
Uses the unified discord_tools library
"""

import sys
import subprocess
from pathlib import Path
from datetime import datetime

# Add current directory to path for discord_tools
sys.path.insert(0, str(Path(__file__).parent))
from discord_tools import get_discord_tools

def main():
    if len(sys.argv) < 2:
        print("Usage: fetch_image <channel-name> [image-number]")
        print("Example: fetch_image amy-delta       # List recent images")
        print("         fetch_image amy-delta 1     # View first image")
        return 1
    
    channel = sys.argv[1]
    
    # Get tools and image directory
    tools = get_discord_tools()
    image_dir = tools.image_dir
    
    # If no image number specified, list recent images
    if len(sys.argv) < 3:
        print(f"🖼️  Recent images in #{channel}:\n")
        
        # Look for images from this channel (excluding thumbnails)
        channel_images = []
        for date_dir in sorted(image_dir.iterdir(), reverse=True):
            if date_dir.is_dir():
                for img in sorted(date_dir.iterdir(), reverse=True):
                    if img.name.startswith(f"{channel}-") and "_thumb" not in img.name:
                        channel_images.append(img)
        
        if not channel_images:
            print(f"No images found from #{channel}")
            print(f"Images are saved to: {image_dir}")
            return 0
        
        # Show up to 10 recent images
        for i, img in enumerate(channel_images[:10], 1):
            # Parse the filename to show details
            parts = img.stem.split('-')
            if len(parts) >= 4:
                date = parts[1]
                time = parts[2]
                print(f"{i}. {img.name}")
                print(f"   Date: {date} Time: {time[:2]}:{time[2:4]}:{time[4:6]}")
                print(f"   Path: {img}")
                
                # Check if thumbnail exists
                thumb_name = img.stem + "_thumb" + img.suffix
                thumb_path = img.parent / thumb_name
                if thumb_path.exists():
                    print(f"   📐 Thumbnail available (context-friendly!)")
            else:
                print(f"{i}. {img.name}")
        
        print(f"\nTo view an image, use: fetch_image {channel} <number>")
        print(f"To view thumbnail, use: fetch_image {channel} <number> thumb")
        return 0
    
    # View specific image
    image_num = int(sys.argv[2])
    view_thumb = len(sys.argv) > 3 and sys.argv[3] == "thumb"
    
    # Find the image (excluding thumbnails)
    channel_images = []
    for date_dir in sorted(image_dir.iterdir(), reverse=True):
        if date_dir.is_dir():
            for img in sorted(date_dir.iterdir(), reverse=True):
                if img.name.startswith(f"{channel}-") and "_thumb" not in img.name:
                    channel_images.append(img)
    
    if image_num < 1 or image_num > len(channel_images):
        print(f"❌ Error: Image number {image_num} not found (1-{len(channel_images)} available)")
        return 1
    
    image_path = channel_images[image_num - 1]
    
    # Check if we should use thumbnail
    if view_thumb:
        thumb_name = image_path.stem + "_thumb" + image_path.suffix
        thumb_path = image_path.parent / thumb_name
        if thumb_path.exists():
            image_path = thumb_path
            print(f"📸 Viewing thumbnail (context-friendly): {image_path.name}")
        else:
            print(f"⚠️  No thumbnail available, showing full image: {image_path.name}")
    else:
        print(f"📸 Viewing full image: {image_path.name}")
        # Check if thumbnail exists and remind user
        thumb_name = image_path.stem + "_thumb" + image_path.suffix
        thumb_path = image_path.parent / thumb_name
        if thumb_path.exists():
            print(f"💡 Tip: Use 'fetch_image {channel} {image_num} thumb' for context-friendly viewing")
    
    # Report the image location (don't try to open viewer in headless environment)
    print(f"\n✅ Image ready at:\n{image_path}")
    print(f"\nTo view this image in Claude Code, use the Read tool with the path above.")
    
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)