#!/usr/bin/env python3
"""
Fetch images from recent Discord messages
Shows available images and allows viewing
Uses the unified discord_tools library
"""

import sys
import subprocess
from pathlib import Path
from datetime import datetime

# Add current directory to path for discord_tools
sys.path.insert(0, str(Path(__file__).parent))
from discord_tools import get_discord_tools

def main():
    if len(sys.argv) < 2:
        print("Usage: fetch_image <channel-name> [image-number]")
        print("Example: fetch_image amy-delta       # List recent images")
        print("         fetch_image amy-delta 1     # View first image")
        return 1
    
    channel = sys.argv[1]
    
    # Get tools and image directory
    tools = get_discord_tools()
    image_dir = tools.image_dir
    
    # If no image number specified, list recent images
    if len(sys.argv) < 3:
        print(f"üñºÔ∏è  Recent images in #{channel}:\n")
        
        # Look for images from this channel
        channel_images = []
        for date_dir in sorted(image_dir.iterdir(), reverse=True):
            if date_dir.is_dir():
                for img in sorted(date_dir.iterdir(), reverse=True):
                    if img.name.startswith(f"{channel}-"):
                        channel_images.append(img)
        
        if not channel_images:
            print(f"No images found from #{channel}")
            print(f"Images are saved to: {image_dir}")
            return 0
        
        # Show up to 10 recent images
        for i, img in enumerate(channel_images[:10], 1):
            # Parse the filename to show details
            parts = img.stem.split('-')
            if len(parts) >= 4:
                date = parts[1]
                time = parts[2]
                print(f"{i}. {img.name}")
                print(f"   Date: {date} Time: {time[:2]}:{time[2:4]}:{time[4:6]}")
                print(f"   Path: {img}")
            else:
                print(f"{i}. {img.name}")
        
        print(f"\nTo view an image, use: fetch_image {channel} <number>")
        return 0
    
    # View specific image
    image_num = int(sys.argv[2])
    
    # Find the image
    channel_images = []
    for date_dir in sorted(image_dir.iterdir(), reverse=True):
        if date_dir.is_dir():
            for img in sorted(date_dir.iterdir(), reverse=True):
                if img.name.startswith(f"{channel}-"):
                    channel_images.append(img)
    
    if image_num < 1 or image_num > len(channel_images):
        print(f"‚ùå Error: Image number {image_num} not found (1-{len(channel_images)} available)")
        return 1
    
    image_path = channel_images[image_num - 1]
    print(f"üì∏ Opening image: {image_path.name}")
    
    # Try to open the image with system viewer
    try:
        # On Linux, try xdg-open
        subprocess.run(['xdg-open', str(image_path)], check=False)
    except:
        print(f"Could not open image viewer. Image saved at:\n{image_path}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)