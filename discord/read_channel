#!/usr/bin/env python3
"""
Read Discord channel messages with automatic image handling
Uses the unified discord_tools library
"""

import sys
import json
from pathlib import Path

# Add current directory to path for discord_tools
sys.path.insert(0, str(Path(__file__).parent))
from discord_tools import get_discord_tools

def list_channels():
    """List available channels from channel state"""
    config_file = Path.home() / "claude-autonomy-platform" / "data" / "channel_state.json"
    
    print("üìã Available channels:")
    if config_file.exists():
        with open(config_file, 'r') as f:
            data = json.load(f)
            channels = data.get('channels', {})
            for name in sorted(channels.keys()):
                print(f"  ‚Ä¢ {name}")
    else:
        print("‚ùå No channel_state.json found!")

def main():
    if len(sys.argv) < 2:
        list_channels()
        return
    
    channel = sys.argv[1]
    limit = int(sys.argv[2]) if len(sys.argv) > 2 else 10
    
    # Use the unified tools
    tools = get_discord_tools()
    result = tools.read_messages(channel, limit)
    
    if not result["success"]:
        print(f"‚ùå Error: {result['error']}")
        return 1
    
    messages = result["messages"]
    print(f"üì® Reading {len(messages)} messages from #{channel}...\n")
    print(f"=== Last {len(messages)} messages ===\n")
    
    for msg in messages:
        # Format timestamp
        from datetime import datetime
        timestamp = datetime.fromisoformat(msg['timestamp'].replace('Z', '+00:00'))
        time_str = timestamp.strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"[{time_str}] {msg['author']}: {msg['content']}")
    
    print(f"\n‚úì Marked #{channel} as read")
    print("‚úÖ Done!")
    
    # Update last read message ID
    update_last_read(channel, messages[-1]["id"] if messages else None)
    
    return 0

def update_last_read(channel_name, message_id):
    """Update the last read message ID for a channel"""
    config_file = Path.home() / "claude-autonomy-platform" / "data" / "channel_state.json"
    
    if not config_file.exists() or not message_id:
        return
    
    try:
        with open(config_file, 'r') as f:
            data = json.load(f)
        
        if channel_name in data.get('channels', {}):
            data['channels'][channel_name]['last_read_message_id'] = message_id
            
            with open(config_file, 'w') as f:
                json.dump(data, f, indent=2)
    except Exception as e:
        print(f"Warning: Could not update last read: {e}")

if __name__ == "__main__":
    sys.exit(main() or 0)